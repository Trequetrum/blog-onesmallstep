<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>One Small Step - PureScript</title>
    <subtitle>Now let it work. Mischief, thou art afoot, Take thou what course thou wilt!</subtitle>
    <link href="https://trequetrum.github.io/blog-onesmallstep/tags/purescript/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://trequetrum.github.io/blog-onesmallstep"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-04-24T00:00:00+00:00</updated>
    <id>https://trequetrum.github.io/blog-onesmallstep/tags/purescript/atom.xml</id>
    <entry xml:lang="en">
        <title>N-Tuple Sudoku Constraints Algorithm</title>
        <published>2023-04-24T00:00:00+00:00</published>
        <updated>2023-04-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://trequetrum.github.io/blog-onesmallstep/n-tuple-sudoku/" type="text/html"/>
        <id>https://trequetrum.github.io/blog-onesmallstep/n-tuple-sudoku/</id>
        
        <content type="html">&lt;h1 id=&quot;sudoku-notations&quot;&gt;Sudoku notations&lt;&#x2F;h1&gt;
&lt;p&gt;This blog entry assumes the reader understands the rules of Sudoku.&lt;&#x2F;p&gt;
&lt;p&gt;When filling in a Sudoku, you may think of each cell on the board as being either &lt;span class=pink-emph&gt;filled in&lt;&#x2F;span&gt; or &lt;span class=pink-emph&gt;empty&lt;&#x2F;span&gt;. As puzzles becomes more advanced, it&#x27;s common for people to add notations or take notes in some way. The notations used here describe each cell in a board as all the remaining possibilities for that cell.&lt;&#x2F;p&gt;
&lt;p&gt;Consider the following board where only a &lt;span class=blue-emph&gt;&lt;strong&gt;5&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt; in the middle is given. You can then notice that the cell&#x27;s row, column, and box have all had all the &lt;span class=blue-emph&gt;&lt;strong&gt;5&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt;s removed. The rest of the cells can all still have any possibility.&lt;&#x2F;p&gt;
 
&lt;img src=&quot;board-5.png&quot; alt=&quot;Vocab Picture&quot; width=&quot;404&quot; height=&quot;404&quot; &#x2F;&gt;
&lt;p&gt;Because this is not a proper Sudoku, we&#x27;ve annotated everything that we can logically deduce and yet we haven&#x27;t solved the puzzle. For a proper Sudoku, you can keep deducing reasons for removing possibilities from cells until each cell has only a single possibility left. Once this is done, the puzzle is solved.&lt;&#x2F;p&gt;
&lt;p&gt;This blog aims to explain an algorithm for removing possibilities from a Sudoku Puzzle. The technique will not solve every proper Sudoku, but it will fully solve most of the puzzles you might find in a sudoku book and can be easily combined with a brute force algorithm to solve the rest. If you look up Sudoku solving techniques online, this algorithm is a generalization of the naked and hidden pairs technique, but generalized for tuples of any size.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll discuss the technique, then explore some ways to efficiently implement the technique via bit-masking.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;vocabulary&quot;&gt;Vocabulary&lt;&#x2F;h1&gt;
&lt;p&gt;Talking about Sudoku requires some vocabulary for which we&#x27;d better be on the same page (pun intended).&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll go through some of that here.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=pink-emph&gt;&lt;strong&gt;Board:&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt; A 9x9 (rank-3) Sudoku board is a collection of 81 cells where each cell belongs to exactly 1 row, 1 column, and 1 box.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;span class=pink-emph&gt;&lt;strong&gt;Rank:&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt; A Sudoku of rank n is an n&lt;sup&gt;2&lt;&#x2F;sup&gt;×n&lt;sup&gt;2&lt;&#x2F;sup&gt; square grid, subdivided into n&lt;sup&gt;2&lt;&#x2F;sup&gt; boxes (each of size n×n). There are n&lt;sup&gt;2&lt;&#x2F;sup&gt; options used to fill out the board.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;span class=pink-emph&gt;&lt;strong&gt;Option:&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt; can be represented by any symbols, though typically options are the numbers used to fill a Sudoku board. On a 9x9 board, they are elements of the set &lt;code&gt;{1,2,3,4,5,6,7,8,9}&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;span class=pink-emph&gt;&lt;strong&gt;Index:&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt; The name for a position on the board. On a 9x9 board, the set of indices are &lt;code&gt;{0..80}&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;span class=pink-emph&gt;&lt;strong&gt;Cell:&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt; An index and a set of options. The set of options for a given cell is an encoding of all the possible options that a position on a board may eventually take. If a cell contains the set &lt;code&gt;{1,4,6,7,8}&lt;&#x2F;code&gt;, that means there are constraints on the board such that any of the other options are invalid. A cell is both a position on a board and a &lt;strong&gt;set&lt;&#x2F;strong&gt; of options. For a 9x9 board, the cardinality (number of possible options) of a cell is between 1 and 9 (no empty set).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;span class=pink-emph&gt;&lt;strong&gt;Forced&#x2F;Solved Cell:&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt; A cell whose set of options has a cardinality of 1.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;span class=pink-emph&gt;&lt;strong&gt;Group:&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt; Predefined collection of cells (row, column, or box)
&lt;ul&gt;
&lt;li&gt;&lt;span class=pink-emph&gt;&lt;strong&gt;Row&#x2F;Col&#x2F;Box:&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt; Names for the 3 groups of a typical Sudoku board&lt;&#x2F;li&gt;
&lt;li&gt;&lt;span class=pink-emph&gt;&lt;strong&gt;Peers:&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt; cells (specifically indices) that share a group&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here is an image highlighting some of these terms:&lt;&#x2F;p&gt;
 
&lt;img src=&quot;full-board-labels.png&quot; alt=&quot;Vocab Picture&quot; width=&quot;600&quot; height=&quot;466&quot; &#x2F;&gt;
&lt;h2 id=&quot;the-one-rule&quot;&gt;The One Rule&lt;&#x2F;h2&gt;
&lt;p&gt;You have solved a Sudoku puzzle &lt;strong&gt;if and only if&lt;&#x2F;strong&gt; you&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fill in the whole board using the set of options such that each group contains each option exactly once.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;&#x2F;h1&gt;
&lt;p&gt;To keep the language and examples from becoming overly verbose, I&#x27;m going to assume a rank-3 &lt;em&gt;(9x9)&lt;&#x2F;em&gt; Sudoku board throughout this explanation. There&#x27;s nothing special about 9x9 Sudoku when it comes to n-tuple constraints and this approach works just as well with any rank Sudoku.&lt;&#x2F;p&gt;
&lt;p&gt;One of the basic approaches to solving a Sudoku puzzle is to search each group (Row, Column, or Box) without regard for the state of the rest of the board. The aim is to split a group into two distinct subgroups such that the two subgroups can safely have no options in common.&lt;&#x2F;p&gt;
&lt;p&gt;There are two approaches that allow you to mechanically find such subgroups. We’ll call these the &lt;em&gt;Naked constraint&lt;&#x2F;em&gt; and the &lt;em&gt;Hidden constraint&lt;&#x2F;em&gt;. &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If we discover these subgroups using the Naked constraint, we&#x27;ll call the subgroup discovered a Naked Tuple. The other subgroup is implicitly just the rest of the group.&lt;&#x2F;li&gt;
&lt;li&gt;If we discover these subgroups using the Hidden constraint, we&#x27;ll call the subgroup discovered a Hidden Tuple. The other subgroup is, again, implicitly the rest of the group.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I define &lt;em&gt;Naked constraint&lt;&#x2F;em&gt; and &lt;em&gt;Hidden constraint&lt;&#x2F;em&gt; below (In &lt;strong&gt;How do Tuples constrain a board?&lt;&#x2F;strong&gt;), but it&#x27;s enlightening to first build some intuition of Naked and Hidden Tuples. Seeing how to find each tuple and understanding that the two are actually duals of one another, further simplifies the definition of these constraints.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;n-tuple-examples&quot;&gt;N-Tuple examples&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s an imagine that show how &lt;strong&gt;either&lt;&#x2F;strong&gt; a naked tuple &lt;strong&gt;or&lt;&#x2F;strong&gt; a hidden tuple can be used to arrive at a new board state. There&#x27;s an example for &lt;span class=pink-emph&gt;singleton&lt;&#x2F;span&gt;s and for &lt;span class=pink-emph&gt;pair&lt;&#x2F;span&gt;s.&lt;&#x2F;p&gt;
 
&lt;img src=&quot;naked-example.png&quot; alt=&quot;Visual Example&quot; width=&quot;1113&quot; height=&quot;581&quot; &#x2F;&gt;
&lt;p&gt;What follows is the same examples described via language:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;naked-n-tuple-described-examples&quot;&gt;Naked N-Tuple described examples&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Naked 1-Tuple:&lt;&#x2F;strong&gt; (&lt;span class=pink-emph&gt;Singleton&lt;&#x2F;span&gt;) There is a cell in this group that has only 1 option (the option 2). Therefore, all other cells in this group cannot contain a 2&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Naked 2-Tuple:&lt;&#x2F;strong&gt; (&lt;span class=pink-emph&gt;Pair&lt;&#x2F;span&gt;) There are 2 cells that have only some of 2 options (2s or 3s). Therefore, all other cells in this group cannot contain a 2 or a 3.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Naked N-Tuple:&lt;&#x2F;strong&gt; There are N cells that have only some of N options. Therefore, all other cells in this group cannot contain any of these N options&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;hidden-n-tuple-described-examples&quot;&gt;Hidden N-Tuple described examples&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hidden 1-Tuple:&lt;&#x2F;strong&gt; (&lt;span class=pink-emph&gt;Singleton&lt;&#x2F;span&gt;) There is only 1 cell in this group that may contain a 2, therefore this cell can contain a only 2 (and no other options)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Hidden 2-Tuple:&lt;&#x2F;strong&gt; (&lt;span class=pink-emph&gt;Pair&lt;&#x2F;span&gt;) There are only 2 cells in this group that contain either a 2 or a 3, therefore these two cells can contain only 2 or 3&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Hidden N-Tuple:&lt;&#x2F;strong&gt; There are only N cells that contain any of these N options, therefore these N cells can contain only these N options&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;how-to-find-a-tuple&quot;&gt;How to find a Tuple&lt;&#x2F;h1&gt;
&lt;p&gt;This dual nature of naked and hidden pairs is at the heart of what this algorithm does. In general, we find a tuple, update the annotations on the board, then repeat.&lt;&#x2F;p&gt;
&lt;p&gt;Is it hard to find such tuples? &lt;&#x2F;p&gt;
&lt;p&gt;Humans are pretty quick to spot &lt;span class=pink-emph&gt;singletons&lt;&#x2F;span&gt; and &lt;span class=pink-emph&gt;pairs&lt;&#x2F;span&gt;, though it can be difficult to see larger tuples. The process of finding a tuple can be seen as set operations on fairly small sets, and fairly small sets can be presented as binary numbers. Computers can perform these checks &lt;strong&gt;extremely&lt;&#x2F;strong&gt; efficiently. More impressive is that the time it takes to find a singleton is the same as the time it takes to discover any of the larger tuples (Though we&#x27;ll see why we prefer smaller tuples regardless when we discuss optimizations)&lt;&#x2F;p&gt;
 
&lt;img src=&quot;tuple-impl.png&quot; alt=&quot;Vocab Picture&quot; width=&quot;600&quot; height=&quot;272&quot; &#x2F;&gt;
&lt;p&gt;There are a few set-operations you need to understand before you can start finding tuples.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=pink-emph&gt;&lt;strong&gt;Cardinality:&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt; A measure of the number of elements of the set. For example, if &lt;strong&gt;α&lt;&#x2F;strong&gt; is &lt;code&gt;{1,2,4,6,7,9}&lt;&#x2F;code&gt;, then the cardinality of &lt;strong&gt;α&lt;&#x2F;strong&gt; is six — &lt;code&gt;|α| == 6&lt;&#x2F;code&gt;. The cardinality of the empty set is zero — &lt;code&gt;|{}| == 0&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=pink-emph&gt;&lt;strong&gt;Superset:&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt; A set of options &lt;strong&gt;α&lt;&#x2F;strong&gt; is a superset of another set &lt;strong&gt;β&lt;&#x2F;strong&gt; if every option in &lt;strong&gt;β&lt;&#x2F;strong&gt; is also an option in &lt;strong&gt;α&lt;&#x2F;strong&gt;. So the set &lt;code&gt;{1,2,3,4,5,6,7,8,9}&lt;&#x2F;code&gt; is a superset of every other possible set of options. The set &lt;code&gt;{8}&lt;&#x2F;code&gt; is only a superset of &lt;code&gt;{8}&lt;&#x2F;code&gt; and &lt;code&gt;{}&lt;&#x2F;code&gt; (the empty set). Since cells cannot have a cardinality of zero, that means &lt;code&gt;{8}&lt;&#x2F;code&gt; is only a superset of cells that are solved with the option 8. &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use this to find naked tuples&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=pink-emph&gt;&lt;strong&gt;Not Disjoint:&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt; If the intersection of two sets is inhabited, then they are not disjoint. The intersection of two sets is just the set of elements they have in common. &lt;code&gt;{5,6,7,8,9}&lt;&#x2F;code&gt; and &lt;code&gt;{1,3,5,7,9}&lt;&#x2F;code&gt; are not disjoint because they have this intersection: &lt;code&gt;{5,7,9}&lt;&#x2F;code&gt;. &lt;code&gt;{1,2,3}&lt;&#x2F;code&gt; and &lt;code&gt;{4,5,6}&lt;&#x2F;code&gt; are disjoint because their intersection is empty &lt;code&gt;{}&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use this to find hidden tuples&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;how-to-find-a-naked-n-tuple&quot;&gt;How to find a Naked N-Tuple.&lt;&#x2F;h2&gt;
&lt;p&gt;You might find a naked tuple if you:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Pick any set of options (They have some cardinality of size &lt;strong&gt;n&lt;&#x2F;strong&gt;) &lt;&#x2F;li&gt;
&lt;li&gt;Pick any group on the board. &lt;&#x2F;li&gt;
&lt;li&gt;If the set you picked is a superset of exactly &lt;strong&gt;n&lt;&#x2F;strong&gt; cells in that group, then those &lt;strong&gt;n&lt;&#x2F;strong&gt; cells form a Naked N-Tuple.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;You will find every naked tuple if you do this for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Every combination of options that form a set (of which there are 511)&lt;&#x2F;li&gt;
&lt;li&gt;Every group (of which there are 27) &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;how-to-find-a-hidden-n-tuple&quot;&gt;How to find a Hidden N-Tuple&lt;&#x2F;h2&gt;
&lt;p&gt;You might find a hidden tuple if you:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Pick any set of options (They have some cardinality of size &lt;strong&gt;n&lt;&#x2F;strong&gt;) &lt;&#x2F;li&gt;
&lt;li&gt;Pick any group on the board. &lt;&#x2F;li&gt;
&lt;li&gt;If the set you picked is not disjoint with exactly &lt;strong&gt;n&lt;&#x2F;strong&gt; cells in that group, then those &lt;strong&gt;n&lt;&#x2F;strong&gt; cells form a Naked N-Tuple in that group.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;You will find every hidden tuple if you do this for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Every combination of options that form a set (of which there are 511)&lt;&#x2F;li&gt;
&lt;li&gt;Every group (of which there are 27) &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;what-do-naked-and-hidden-n-tuples-have-in-common&quot;&gt;What do Naked and Hidden N-Tuples have in common?&lt;&#x2F;h3&gt;
&lt;p&gt;When describing how to find a Hidden or Naked Tuple, the process is nearly identical. Intuitively you can use the same algorithm to find both. Moreover, if you look for both at the same time, you don&#x27;t have to repeat steps 1 and 2 from above.&lt;&#x2F;p&gt;
&lt;p&gt;There is a much stronger relationship between these two constraints. For any value of N, every Naked N Tuple has a corresponding Hidden (9-N) Tuple and vice versa.&lt;&#x2F;p&gt;
&lt;p&gt;For example: the following &lt;code&gt;[]&lt;&#x2F;code&gt;s contain a group. Each cell is just an index paired with a set of options (These indices happen to be from a box in the board.)&lt;&#x2F;p&gt;
 
&lt;img src=&quot;tuple-common.png&quot; alt=&quot;Vocab Picture&quot; width=&quot;246&quot; height=&quot;246&quot; &#x2F;&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[ (0  { 1,2,3,4,5,6,7,8,9 })
, (1  {   2,3,4,5,6,7,8,9 })
, (2  {   2,3,4,5,6,7,8,9 })
, (9  {   2,3,4,5,6,7,8,9 })
, (10 {   2,3,4,5,6,7,8,9 })
, (11 {   2,3,4,5,6,7,8,9 })
, (18 {   2,3,4,5,6,7,8,9 })
, (19 {   2,3,4,5,6,7,8,9 })
, (20 {   2,3,4,5,6,7,8,9 })
]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;The set {1} with cardinality 1 is not disjoint with exactly 1 cell in this group (The cell with index 0). &lt;&#x2F;li&gt;
&lt;li&gt;Therefore: this cell is a hidden 1-tuple in this group. &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If that&#x27;s so, what is the corresponding naked 8-tuple? Well: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The set {2,3,4,5,6,7,8,9} with cardinality 8 is a superset of exactly 8 cells in this group (The cells with indices 1,2,9,10,11,18,19,20).&lt;&#x2F;li&gt;
&lt;li&gt;Therefore: these cells are a Naked 8-Tuple in this group.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;em&gt;(A moment&#x27;s reflection with show that...)&lt;&#x2F;em&gt; This pattern holds for every Hidden and Naked Tuple. Hidden Tuples are the dual of naked Tuples. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;if-every-naked-tuple-has-a-corresponding-hidden-tuple-and-vice-versa-do-we-need-both&quot;&gt;If every Naked Tuple has a corresponding Hidden Tuple and vice versa, do we need both?&lt;&#x2F;h3&gt;
&lt;p&gt;Strictly speaking, no. They represent the same constraints on the board.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;But&lt;&#x2F;strong&gt;: when designing an algorithm smaller tuples are better. This is for a few reasons.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;If you look for small tuples first, you can narrow the search space while looking for larger tuples. For example: if the cells (2 {3,4}) &amp;amp; (8 {3,4}) are a 2-Tuple, then no other n-tuples of size 2, 3, 4, etc in the same group need to search the indices 2 or 8 nor the options 3 or 4. This doesn&#x27;t work in reverse. Consider if cells (2 {3}) &amp;amp; (8 {3,4}) are a 2-Tuple, we still want to find the naked 1-tuple (2 {3}) since it would represent a constraint that removes the 3 from (8 {3,4}).&lt;&#x2F;li&gt;
&lt;li&gt;Tuples can exist in more than one group at a time. If we find a 1-tuple in the first row, this is guaranteed to also be a 1-tuple in a column and a box (Every index has exactly 1 row, 1 column, and 1 box). In a 9x9 board, n-tuples of size 1 always have 3 groups, while n-tuples of size 2 and 3 may have up to 2 groups. Smaller tuples are better because they can be constraints for and narrow the search space in multiple groups at once.&lt;&#x2F;li&gt;
&lt;li&gt;If you look for both Hidden and Naked tuples at once, you can stop looking after you&#x27;ve searched for n-tuples of size 4. Hidden Tuples of sizes 1 to 4 correspond to Naked Tuples of sizes 9 to 5 and vice versa (Naked Tuples of sizes 1 to 4 correspond to Hidden Tuples of sizes 9 to 5)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;how-tuples-constrain-a-board&quot;&gt;How Tuples Constrain a Board&lt;&#x2F;h1&gt;
&lt;p&gt;An N-Tuple is a set of options with cardinality &lt;strong&gt;n&lt;&#x2F;strong&gt;, paired with a list of indices of length &lt;strong&gt;n&lt;&#x2F;strong&gt;.&lt;br &#x2F;&gt;
Each N-Tuple constrains the board in 2 ways:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Naked  Constraint:&lt;&#x2F;strong&gt; Constrain the cells at each index to be a subset of the set of options.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Hidden Constraint:&lt;&#x2F;strong&gt; Constrain the peers of this n-Tuple to be disjoint with the set of options.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In either case, you remove the minimal number of elements possible such that this constraint is met.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The peers of an n-tuple:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The peers of a cell are all the other cells that share a group with it. Remember that each cell is part of three groups.&lt;&#x2F;li&gt;
&lt;li&gt;The peers of a list of cells are the cells that share a group with with every cell in the list. A tuple must share at least 1 group. The cells with index 0 and 12 have no peers can therefore never be a valid 2-tuple.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Notice the symmetry here:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;We find a Naked Tuple by discovering that the first constraint is satisfied and therefore can enforce the second constraint on the board.&lt;&#x2F;li&gt;
&lt;li&gt;We find a Hidden Tuple by discovering that the second constraint is satisfied and therefore can enforce the first constraint n the board.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;So while each tuple can enforce both constraints, only one of the constraints will ever change the cells on the board. One of the two constraints will already have been met.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;representing-data&quot;&gt;Representing Data&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;representing-a-cell&quot;&gt;Representing a Cell&lt;&#x2F;h2&gt;
&lt;p&gt;A fast a simple way to encode the set of options for a cell is as an integer bit-field. In the binary representation, each digit represents a true&#x2F;false value for the question (is n an element of this cell&#x27;s set).&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;000000000 is the empty set {} 
000000001 is the set {1} 
000000010 is the set {2} 
000000100 is the set {3} 
000000111 is the set {1,2,3} 
101010101 is the set {1,3,5,7,9} 
111111111 is the set {1,2,3,4,5,6,7,8,9} 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;representing-a-board&quot;&gt;Representing a board&lt;&#x2F;h2&gt;
&lt;p&gt;A board can be represented by the unconstrained options for each cell. In this way, a starting board constrains each clue as the only option for the given cell and leaves all other options unconstrained.&lt;&#x2F;p&gt;
&lt;p&gt;These representations all describe the same starting board:&lt;&#x2F;p&gt;
 
&lt;img src=&quot;board-example.png&quot; alt=&quot;Sudoku Example&quot; width=&quot;404&quot; height=&quot;404&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Integer base10&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;purescript&quot; class=&quot;language-purescript z-code&quot;&gt;&lt;code class=&quot;language-purescript&quot; data-lang=&quot;purescript&quot;&gt;&lt;span class=&quot;z-source z-purescript&quot;&gt;  [ &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;8&lt;&#x2F;span&gt;,  &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;32&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;64&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;2&lt;&#x2F;span&gt;,  &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;16&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;128&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;256&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;32&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;32&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;4&lt;&#x2F;span&gt;,  &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;8&lt;&#x2F;span&gt;,  &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;128&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;4&lt;&#x2F;span&gt;,  &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;128&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;2&lt;&#x2F;span&gt;,  &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;1&lt;&#x2F;span&gt;,  &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;256&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;32&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;8&lt;&#x2F;span&gt;,  &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;64&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;16&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;1&lt;&#x2F;span&gt;,  &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;256&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;1&lt;&#x2F;span&gt;,  &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;2&lt;&#x2F;span&gt;,  &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;8&lt;&#x2F;span&gt;,  &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;16&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;2&lt;&#x2F;span&gt;,  &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;256&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;1&lt;&#x2F;span&gt;,  &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;64&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;8&lt;&#x2F;span&gt;,  &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;4&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;2&lt;&#x2F;span&gt;,  &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;32&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;4&lt;&#x2F;span&gt;,  &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;128&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;511&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;1&lt;&#x2F;span&gt;
  ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Integer base2:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;purescript&quot; class=&quot;language-purescript z-code&quot;&gt;&lt;code class=&quot;language-purescript&quot; data-lang=&quot;purescript&quot;&gt;&lt;span class=&quot;z-source z-purescript&quot;&gt;  [ &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000001000&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000100000&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;001000000&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000010&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000010000&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;010000000&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;100000000&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000100000&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000100000&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000100&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000001000&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;010000000&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000100&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;010000000&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000010&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000001&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;100000000&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000100000&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000001000&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;001000000&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000010000&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000001&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;100000000&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000001&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000010&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000001000&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000010000&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000010&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;100000000&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000001&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;001000000&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000001000&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000100&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000010&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000100000&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000100&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;010000000&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000001&lt;&#x2F;span&gt;
  ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;As sets of options, converted to strings:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;purescript&quot; class=&quot;language-purescript z-code&quot;&gt;&lt;code class=&quot;language-purescript&quot; data-lang=&quot;purescript&quot;&gt;&lt;span class=&quot;z-source z-purescript&quot;&gt;  [ &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;4&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;6&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;7&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;2&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;5&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;8&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;9&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;6&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;6&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;3&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;4&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;8&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;3&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;8&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;2&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;1&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;9&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;6&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;4&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;7&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;5&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;1&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;9&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;1&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;2&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;4&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;5&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;2&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;9&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;1&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;7&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;4&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;3&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;2&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;6&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;3&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;8&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,        &lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;123456789&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-purescript&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;1&lt;span class=&quot;z-punctuation z-definition z-string z-end z-purescript&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The starting board above has 38 easy to spot naked 1 Tuples.&lt;&#x2F;p&gt;
&lt;p&gt;If we consider cells with the set of options &lt;code&gt;{4}&lt;&#x2F;code&gt;, then &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;cell &lt;code&gt;board[2]&lt;&#x2F;code&gt; is a Naked 1 Tuple in Row 0, Column 2, and Box 0.&lt;&#x2F;li&gt;
&lt;li&gt;cell &lt;code&gt;board[22]&lt;&#x2F;code&gt; is a naked 1 Tuple in Row 2, Column 4, and Box 1.&lt;&#x2F;li&gt;
&lt;li&gt;3 more 1-Tuples follow this pattern with &amp;quot;4&amp;quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If we consider cells with the set of options &lt;code&gt;{4,6}&lt;&#x2F;code&gt;, then&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;cells &lt;code&gt;board[2]&lt;&#x2F;code&gt;&amp;amp;&lt;code&gt;board[3]&lt;&#x2F;code&gt; are a Naked 2 Tuple in Row 0&lt;&#x2F;li&gt;
&lt;li&gt;cells &lt;code&gt;board[2]&lt;&#x2F;code&gt;&amp;amp;&lt;code&gt;board[19]&lt;&#x2F;code&gt; are a Naked 2 Tuple in Box 0&lt;&#x2F;li&gt;
&lt;li&gt;cells &lt;code&gt;board[22]&lt;&#x2F;code&gt;&amp;amp;&lt;code&gt;board[76]&lt;&#x2F;code&gt; are a Naked 2 Tuple in Column 3&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Lets apply the Naked 1-Tuple constraints to this starting board:&lt;&#x2F;p&gt;
 
&lt;img src=&quot;board-example-cont.png&quot; alt=&quot;Sudoku Example&quot; width=&quot;404&quot; height=&quot;404&quot; &#x2F;&gt;
&lt;p&gt;This would be the output of one iteration of the Naked 1 Tuple algorithm. &lt;strong&gt;Aside:&lt;&#x2F;strong&gt; This iteration has revealed some Naked 1 Tuples which where not present before, so the Naked 1 Tuple algorithm could be run for another iteration. This project encodes this sort of information using the &lt;code&gt;Stateful&lt;&#x2F;code&gt; abstract data type in &lt;code&gt;Stateful.purs&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Row 4 now has an interesting application of &lt;strong&gt;Naked&lt;&#x2F;strong&gt; 3-Tuples.&lt;br &#x2F;&gt;
Consider cells with only the set of options &lt;code&gt;{3,8,9}&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;board[39]&lt;&#x2F;code&gt; = &lt;code&gt;{3,9}&lt;&#x2F;code&gt;. &lt;code&gt;board[40]&lt;&#x2F;code&gt; = &lt;code&gt;{3,8,9}&lt;&#x2F;code&gt; &amp;amp; &lt;code&gt;board[43]&lt;&#x2F;code&gt; = &lt;code&gt;{3,8}&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Every other cell in Row 4 has at least 1 option that isn&#x27;t a 3, 8 or 9&lt;&#x2F;li&gt;
&lt;li&gt;Therefore, no other cells in Row 4 may contain a 3, 8 or 9&lt;&#x2F;li&gt;
&lt;li&gt;Therefore, &lt;code&gt;board[41]&lt;&#x2F;code&gt; which currently has &lt;code&gt;{6,8,9}&lt;&#x2F;code&gt;, can be further constrained to &lt;code&gt;{6}&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Remember that every Naked N-Tuple there has a corresponding Hidden 9-N Tuple.&lt;br &#x2F;&gt;
Row 4 has the same application of a &lt;strong&gt;Hidden&lt;&#x2F;strong&gt; 6-Tuple.&lt;br &#x2F;&gt;
Consider cells with the set of options &lt;code&gt;{1,2,4,5,6,7}&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;board[n]&lt;&#x2F;code&gt; where n = 36,37,38,41,42,44 are the only cells in Row 4 that have at least one of any of the options 1,2,4,5,6, or 7&lt;&#x2F;li&gt;
&lt;li&gt;Therefore, these 6 cells in Row must contain only 1,2,4,5,6, or 7 (and no other options)&lt;&#x2F;li&gt;
&lt;li&gt;Therefore, &lt;code&gt;board[41]&lt;&#x2F;code&gt; which currently has &lt;code&gt;{6,8,9}&lt;&#x2F;code&gt;, can be further constrained to &lt;code&gt;{6}&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;groups&quot;&gt;Groups&lt;&#x2F;h2&gt;
&lt;p&gt;This is how a group might look for the 0th box in a Sudoku with board-size 9.&lt;br &#x2F;&gt;
This is just made up and not based on the board shown above.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;purescript&quot; class=&quot;language-purescript z-code&quot;&gt;&lt;code class=&quot;language-purescript&quot; data-lang=&quot;purescript&quot;&gt;&lt;span class=&quot;z-source z-purescript&quot;&gt;unit &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; select [&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;0&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;1&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;2&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;9&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;10&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;11&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;18&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;19&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;20&lt;&#x2F;span&gt;] sudokuBoard &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;==&lt;&#x2F;span&gt;
  [ &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000001&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-purescript&quot;&gt;-- unit[0] == sudokuBoard[0] is a cell that has only 1 of 9 possible symbols as an option&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;101010101&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-purescript&quot;&gt;-- unit[1] == sudokuBoard[1] is a cell that has 5 of 9 possible symbols as an option&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000100010&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-purescript&quot;&gt;-- unit[2] == sudokuBoard[2]&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000111000&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-purescript&quot;&gt;-- unit[3] == sudokuBoard[9]&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;010000000&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000110000&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000110000&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000110000&lt;&#x2F;span&gt;
  , &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000110000&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-purescript&quot;&gt;-- unit[8] == sudokuBoard[20]&lt;&#x2F;span&gt;
  ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;a-detour-into-purescript&quot;&gt;A detour into purescript.&lt;&#x2F;h3&gt;
&lt;p&gt;If we consider the unconstrained options in a cell as a set of options, then we can use bitwise operations to describe two important relationships between cells.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;isSuperset&lt;&#x2F;strong&gt; helps us find Naked N-Tuples&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Does cell &lt;code&gt;a&lt;&#x2F;code&gt; contain at least every option found in cell &lt;code&gt;b&lt;&#x2F;code&gt;?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Not Disjoint&lt;&#x2F;strong&gt; helps us find Hidden N-Tuples&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Do two cells share any options in common?&lt;&#x2F;li&gt;
&lt;li&gt;Is the union of two cells inhabited?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;span class=blue-emph&gt;OR&lt;&#x2F;span&gt; is the bitwise OR operation.&lt;br &#x2F;&gt;
&lt;span class=blue-emph&gt;AND&lt;&#x2F;span&gt; is the bitwise AND operation.&lt;&#x2F;p&gt;
&lt;p&gt;This is how this might be written in Purescript&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;purescript&quot; class=&quot;language-purescript z-code&quot;&gt;&lt;code class=&quot;language-purescript&quot; data-lang=&quot;purescript&quot;&gt;&lt;span class=&quot;z-source z-purescript&quot;&gt;  &lt;span class=&quot;z-keyword z-other z-purescript&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-purescript&quot;&gt;Cell&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-purescript&quot;&gt;Int&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-declaration z-function z-purescript&quot;&gt;  &lt;span class=&quot;z-entity z-name z-function z-purescript&quot;&gt;isSuperset&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-has-type z-purescript&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-purescript&quot;&gt;Cell&lt;&#x2F;span&gt; &lt;span class=&quot;z-arrow z-operator z-purescript&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-purescript&quot;&gt;Cell&lt;&#x2F;span&gt; &lt;span class=&quot;z-arrow z-operator z-purescript&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-purescript&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  isSuperset a b &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; a &lt;span class=&quot;z-constant z-other z-purescript&quot;&gt;OR&lt;&#x2F;span&gt; b &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;==&lt;&#x2F;span&gt; a

&lt;span class=&quot;z-meta z-declaration z-function z-purescript&quot;&gt;  &lt;span class=&quot;z-entity z-name z-function z-purescript&quot;&gt;notDisjoint&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-has-type z-purescript&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-purescript&quot;&gt;Cell&lt;&#x2F;span&gt; &lt;span class=&quot;z-arrow z-operator z-purescript&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-purescript&quot;&gt;Cell&lt;&#x2F;span&gt; &lt;span class=&quot;z-arrow z-operator z-purescript&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-purescript&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  notDisjoint a b &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; a &lt;span class=&quot;z-constant z-other z-purescript&quot;&gt;AND&lt;&#x2F;span&gt; b &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;&#x2F;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;algorithm&quot;&gt;Algorithm&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;hidden-n-tuples-naked-n-tuples-algorithm&quot;&gt;Hidden N Tuples &amp;amp; Naked N Tuples Algorithm&lt;&#x2F;h2&gt;
&lt;p&gt;This algorithm works over groups (Rows, Columns, and Boxes), what&#x27;s described here can be done for each group in turn.&lt;&#x2F;p&gt;
&lt;p&gt;The general flow is to generate actions for every group, and then apply those actions to update the board state. That&#x27;s one iteration of the algorithm. If you&#x27;ve generated any actions that have updated the board state, then you can run a second iteration of this algorithm on the new board. &lt;strong&gt;Aside:&lt;&#x2F;strong&gt; In this project, &lt;code&gt;hiddenTuples&lt;&#x2F;code&gt; and &lt;code&gt;nakedTuples&lt;&#x2F;code&gt; are strategies that each describe one iteration and &lt;code&gt;untilStable&lt;&#x2F;code&gt; can re-run any strategy until it doesn&#x27;t update the board anymore.&lt;&#x2F;p&gt;
&lt;p&gt;The algorithm iterates through possible cells (for board-size of 9, this is integers between 1 and 511), and gets board indices of the group that have a &lt;code&gt;notDisjoint&lt;&#x2F;code&gt; or &lt;code&gt;isSuperset&lt;&#x2F;code&gt; relationship with this cell&lt;&#x2F;p&gt;
&lt;p&gt;Examples from the group shown above:&lt;br &#x2F;&gt;
Integers in these arrays correspond to indices in the board.&lt;br &#x2F;&gt;
In this example, cell &lt;code&gt;000000001&lt;&#x2F;code&gt; is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;notDisjoint with the cells at indices 0 and 1&lt;&#x2F;li&gt;
&lt;li&gt;A superset of a cell at index 0&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;purescript&quot; class=&quot;language-purescript z-code&quot;&gt;&lt;code class=&quot;language-purescript&quot; data-lang=&quot;purescript&quot;&gt;&lt;span class=&quot;z-source z-purescript&quot;&gt;  unit &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; select [&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;0&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;1&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;2&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;9&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;10&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;11&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;18&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;19&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;20&lt;&#x2F;span&gt;] sudokuBoard
  &lt;span class=&quot;z-comment z-block z-purescript&quot;&gt;{----- For Reference ---------
         [ 000000001 -- 0
         , 101010101 -- 1 
         , 000100010 -- 2
         , 000111000 -- 9
         , 010000000 -- 10
         , 000110000 -- 11
         , 000110000 -- 18
         , 000110000 -- 19
         , 000110000 -- 20
         ] 
  ------------------------------}&lt;&#x2F;span&gt; 
  [ {cell&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000001&lt;&#x2F;span&gt;, notDisjoint&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;:&lt;&#x2F;span&gt; [&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;0&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;1&lt;&#x2F;span&gt;] superset&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;:&lt;&#x2F;span&gt; [&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;0&lt;&#x2F;span&gt;] }
  , {cell&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000010&lt;&#x2F;span&gt;, notDisjoint&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;:&lt;&#x2F;span&gt; [&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;2&lt;&#x2F;span&gt;] superset&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-purescript&quot;&gt;[]&lt;&#x2F;span&gt; }
  , {cell&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000011&lt;&#x2F;span&gt;, notDisjoint&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;:&lt;&#x2F;span&gt; [&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;0&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;1&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;2&lt;&#x2F;span&gt;] superset&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;:&lt;&#x2F;span&gt; [&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;0&lt;&#x2F;span&gt;] }
  , {cell&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000100&lt;&#x2F;span&gt;, notDisjoint&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;:&lt;&#x2F;span&gt; [&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;1&lt;&#x2F;span&gt;] superset&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-purescript&quot;&gt;[]&lt;&#x2F;span&gt; }
  , {cell&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000101&lt;&#x2F;span&gt;, notDisjoint&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;:&lt;&#x2F;span&gt; [&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;0&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;1&lt;&#x2F;span&gt;] superset&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;:&lt;&#x2F;span&gt; [&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;0&lt;&#x2F;span&gt;] }
  , &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;...&lt;&#x2F;span&gt;
  , {cell&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111110&lt;&#x2F;span&gt;, notDisjoint&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;:&lt;&#x2F;span&gt; [&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;1&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;2&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;9&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;10&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;11&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;18&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;19&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;20&lt;&#x2F;span&gt;] superset&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;:&lt;&#x2F;span&gt; [&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;2&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;9&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;10&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;11&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;18&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;19&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;20&lt;&#x2F;span&gt;] }
  , {cell&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111111&lt;&#x2F;span&gt;, notDisjoint&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;:&lt;&#x2F;span&gt; [&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;0&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;1&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;2&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;9&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;10&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;11&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;18&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;19&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;20&lt;&#x2F;span&gt;] superset&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;:&lt;&#x2F;span&gt; [&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;0&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;1&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;2&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;9&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;10&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;11&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;18&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;19&lt;&#x2F;span&gt;,&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;20&lt;&#x2F;span&gt;] }
  ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here is how we mechanically decide whether we have found a Naked&#x2F;Hidden N Tuple:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;purescript&quot; class=&quot;language-purescript z-code&quot;&gt;&lt;code class=&quot;language-purescript&quot; data-lang=&quot;purescript&quot;&gt;&lt;span class=&quot;z-source z-purescript&quot;&gt;size notDisjoint &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; length notDisjoint
size superset &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; length superset
size cell &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;...&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-purescript&quot;&gt;-- number of 1s in binary representation of cell&lt;&#x2F;span&gt;

&lt;span class=&quot;z-keyword z-control z-purescript&quot;&gt;if&lt;&#x2F;span&gt; size cell &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;==&lt;&#x2F;span&gt; size superset) &lt;span class=&quot;z-keyword z-control z-purescript&quot;&gt;then&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-purescript&quot;&gt;-- this is a naked tuple&lt;&#x2F;span&gt;
&lt;span class=&quot;z-keyword z-control z-purescript&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;...&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;...&lt;&#x2F;span&gt; superset) &lt;span class=&quot;z-keyword z-control z-purescript&quot;&gt;then&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-purescript&quot;&gt;-- I&amp;#39;m not interested &lt;&#x2F;span&gt;
&lt;span class=&quot;z-keyword z-control z-purescript&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;...&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;...&lt;&#x2F;span&gt; superset) &lt;span class=&quot;z-keyword z-control z-purescript&quot;&gt;then&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-purescript&quot;&gt;-- this board is not valid&lt;&#x2F;span&gt;

&lt;span class=&quot;z-keyword z-control z-purescript&quot;&gt;if&lt;&#x2F;span&gt; size cell &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;==&lt;&#x2F;span&gt; size notDisjoint) &lt;span class=&quot;z-keyword z-control z-purescript&quot;&gt;then&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-purescript&quot;&gt;-- this is a hidden tuple&lt;&#x2F;span&gt;
&lt;span class=&quot;z-keyword z-control z-purescript&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;...&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;...&lt;&#x2F;span&gt; notDisjoint) &lt;span class=&quot;z-keyword z-control z-purescript&quot;&gt;then&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-purescript&quot;&gt;-- this board is not valid&lt;&#x2F;span&gt;
&lt;span class=&quot;z-keyword z-control z-purescript&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;...&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;...&lt;&#x2F;span&gt; notDisjoint) &lt;span class=&quot;z-keyword z-control z-purescript&quot;&gt;then&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-purescript&quot;&gt;-- I&amp;#39;m not interested&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Each tuple found can generate actions that update the board state.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;generating-actions-for-naked-tuples&quot;&gt;Generating Actions for Naked Tuples:&lt;&#x2F;h3&gt;
&lt;p&gt;For all indices that have a naked tuple, drop that option in all other indices for the unit 
Example Naked 1-Tuple:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;purescript&quot; class=&quot;language-purescript z-code&quot;&gt;&lt;code class=&quot;language-purescript&quot; data-lang=&quot;purescript&quot;&gt;&lt;span class=&quot;z-source z-purescript&quot;&gt;  &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000001&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; superset&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;:&lt;&#x2F;span&gt; [&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;0&lt;&#x2F;span&gt;]
  &lt;span class=&quot;z-support z-function z-prelude z-bits z-purescript&quot;&gt;complement&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000001&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111110&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Generated Actions: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;indices of interest is the difference between indices in the unit and indices that superset found &lt;&#x2F;li&gt;
&lt;li&gt;indices of interest = [0,1,2,9,10,11,18,19,20] \ [0] == [1,2,9,10,11,18,19,20]&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;purescript&quot; class=&quot;language-purescript z-code&quot;&gt;&lt;code class=&quot;language-purescript&quot; data-lang=&quot;purescript&quot;&gt;&lt;span class=&quot;z-source z-purescript&quot;&gt;  board[&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;1&lt;&#x2F;span&gt;] &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;101010101&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-purescript&quot;&gt;AND&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111110&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;101010100&lt;&#x2F;span&gt;
  board[&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;2&lt;&#x2F;span&gt;] &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000100010&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-purescript&quot;&gt;AND&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111110&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000100010&lt;&#x2F;span&gt;
  board[&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;9&lt;&#x2F;span&gt;] &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000111000&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-purescript&quot;&gt;AND&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111110&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000111000&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;...&lt;&#x2F;span&gt;
  board[&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;20&lt;&#x2F;span&gt;] &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000110000&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-purescript&quot;&gt;AND&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;111111110&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000110000&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Generalized:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;purescript&quot; class=&quot;language-purescript z-code&quot;&gt;&lt;code class=&quot;language-purescript&quot; data-lang=&quot;purescript&quot;&gt;&lt;span class=&quot;z-source z-purescript&quot;&gt;  board[n] &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; board[n] &lt;span class=&quot;z-constant z-other z-purescript&quot;&gt;AND&lt;&#x2F;span&gt; (&lt;span class=&quot;z-support z-function z-prelude z-bits z-purescript&quot;&gt;complement&lt;&#x2F;span&gt; cell)
  &lt;span class=&quot;z-keyword z-other z-purescript&quot;&gt;where&lt;&#x2F;span&gt;
  n is an index &lt;span class=&quot;z-keyword z-control z-purescript&quot;&gt;of&lt;&#x2F;span&gt; interest
  cell is the possible combination &lt;span class=&quot;z-keyword z-control z-purescript&quot;&gt;of&lt;&#x2F;span&gt; options that generated n
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;generating-actions-for-hidden-tuples&quot;&gt;Generating Actions for Hidden Tuples:&lt;&#x2F;h3&gt;
&lt;p&gt;For all indices that have a hidden tuple, drop all other options at those indices 
Example Hidden 1-Tuple:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;purescript&quot; class=&quot;language-purescript z-code&quot;&gt;&lt;code class=&quot;language-purescript&quot; data-lang=&quot;purescript&quot;&gt;&lt;span class=&quot;z-source z-purescript&quot;&gt;  &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000010&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; notDisjoint&lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;:&lt;&#x2F;span&gt; [&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;2&lt;&#x2F;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Generated Actions: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;indices of interest are the indices that notDisjoint found &lt;&#x2F;li&gt;
&lt;li&gt;indices of interest = [2]&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;purescript&quot; class=&quot;language-purescript z-code&quot;&gt;&lt;code class=&quot;language-purescript&quot; data-lang=&quot;purescript&quot;&gt;&lt;span class=&quot;z-source z-purescript&quot;&gt;  board[&lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;2&lt;&#x2F;span&gt;] &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000100010&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-purescript&quot;&gt;AND&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000010&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-purescript&quot;&gt;000000010&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Generalized:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  board[n] = board[n] AND cell
  where
  n is an index of interest
  cell is the possible combination of options that generated n
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;standardizing-actions&quot;&gt;Standardizing Actions&lt;&#x2F;h2&gt;
&lt;p&gt;Actions above were described as mutations to the board.&lt;&#x2F;p&gt;
&lt;p&gt;If we treat &lt;code&gt;board&lt;&#x2F;code&gt; as some global state, this is how we might wright action in Javascript.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; class=&quot;language-typescript z-code&quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;  &lt;span class=&quot;z-meta z-function z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-ts&quot;&gt;function&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-definition z-function z-ts&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;action&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-parameters z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-begin z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-ts&quot;&gt;index&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-parameter z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-ts&quot;&gt;cell&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-end z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt; 
    &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;board&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-array z-literal z-ts&quot;&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;index&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;board&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-array z-literal z-ts&quot;&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;index&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;AND&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;cell&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The take-away is that two integers (index &amp;amp; cell) are enough to encode any action described above. 
We can use types to describe an action like this is purescript:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;purescript&quot; class=&quot;language-purescript z-code&quot;&gt;&lt;code class=&quot;language-purescript&quot; data-lang=&quot;purescript&quot;&gt;&lt;span class=&quot;z-source z-purescript&quot;&gt;  &lt;span class=&quot;z-keyword z-other z-purescript&quot;&gt;newtype&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-purescript&quot;&gt;Index&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-purescript&quot;&gt;Index&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-purescript&quot;&gt;Int&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-keyword z-other z-purescript&quot;&gt;newtype&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-purescript&quot;&gt;Cell&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-purescript&quot;&gt;Cell&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-purescript&quot;&gt;Int&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-keyword z-other z-purescript&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-purescript&quot;&gt;Action&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-purescript&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-purescript&quot;&gt;Tuple&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-purescript&quot;&gt;Index&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-purescript&quot;&gt;Cell&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;algorithm-optimizations&quot;&gt;Algorithm optimizations&lt;&#x2F;h2&gt;
&lt;p&gt;Checking a rank-3 board for every possible naked or hidden tuple requires &lt;code&gt;248,346 (511 * 27 * 9 * 2)&lt;&#x2F;code&gt; bitwise operations. On most modern CPUs, that takes a few microseconds (I measured this at 62μs). At such small numbers, the cost of computing tuples will be dwarfed by the cost of cash misses while reading from and writing to memory. I found that implementing optimizations in PureScript offered immediate benefits, but trying the same thing with my Rust implementaion was trickier. My guess for why (Without digging into the generated assembly) is that any optimization that might invalidate cash locality is a problem.&lt;&#x2F;p&gt;
&lt;p&gt;So while there arguments to be made about premature optimizations, here are some things you can notice about this algorithm that may lead to optimizations if done carefully (and bench-marked, etc). Earlier, when we said smaller tuples where better, these are optimizations that witnesses that.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shrink-the-search-space&quot;&gt;Shrink the search-space&lt;&#x2F;h3&gt;
&lt;p&gt;Remember when we iterated through all possible sets of options (integers 1 to 511)? The naive implementation is to iterate through them using their natural ordering under integers. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Yeah, don&#x27;t do that.&lt;&#x2F;em&gt; Instead, order this by the cardinality of the sets. (Remember that the cardinality of a set is the number of 1s in its binary representation.)&lt;&#x2F;p&gt;
&lt;p&gt;For a board of size 9, that looks like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;1, 2, 4, 8, 16, 32, 64, 128, 256, 3, 5, 6, 9, 10, 12, 17, 18, 20, 24, 33, 34, 36, 40, 48, 65, 66, 68, 72, 80, 96, 129, 130, 132, 136, 144, 160, 192, 257, 258, 260, 264, 272, 288, 320, 384, [...etc, etc], 255, 383, 447, 479, 495, 503, 507, 509, 510, 511&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s easier to spot the cardinality of each set of options if the same sequence is written in binary:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;000000001, 000000010, 000000100, 000001000, 000010000, 000100000, 001000000, 010000000, 100000000, 000000011, 000000101, 000000110, 000001001, 000001010, 000001100, 000010001, 000010010, 000010100, 000011000, 000100001, 000100010, 000100100, 000101000, 000110000, 001000001, 001000010, 001000100, 001001000, 001010000, 001100000, 010000001, 010000010, 010000100, 010001000, 010010000, 010100000, 011000000, 100000001, 100000010, 100000100, 100001000, 100010000, 100100000, 101000000, 110000000, [...etc, etc], 011111111, 101111111, 110111111, 111011111, 111101111, 111110111, 111111011, 111111101, 111111110, 111111111&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now searching for Tuples starts with the smallest sets of options and progresses to larger ones. Because of this ordering, if a tuple is found:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Options within the tuple can be ignored when searching for more tuples (Fewer possible sets of options to iterate through)&lt;&#x2F;li&gt;
&lt;li&gt;Indices containing the tuple can be ignored when searching for more tuples (Fewer indices to check for tuples)&lt;&#x2F;li&gt;
&lt;li&gt;Sets of options with size larger than the size of the remaining indices can be ignored
&lt;ul&gt;
&lt;li&gt;Since possible sets of options are ordered by size, the above can be implemented via an early return&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;free-naked-n-tuples&quot;&gt;Free Naked N-Tuples&lt;&#x2F;h3&gt;
&lt;p&gt;You can also get some Naked Tuples for free while running the either Tuple algorithm
For example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;If&lt;&#x2F;strong&gt; a row finds a hidden 2 Tuple &lt;strong&gt;and&lt;&#x2F;strong&gt; both indices are in the same box&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Then&lt;&#x2F;strong&gt; those two indices describe a Naked 2 Tuple for the box.
If you don&#x27;t take the Free Naked 2 Tuple described in this example, The next iteration will discover it as a Hidden 7 Tuple. Duplicating the work being done.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;In general&lt;&#x2F;strong&gt;, if the indices of an N-Tuple from one unit are all peers in any other unit, then they are a Naked N Tuple in that other unit.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
